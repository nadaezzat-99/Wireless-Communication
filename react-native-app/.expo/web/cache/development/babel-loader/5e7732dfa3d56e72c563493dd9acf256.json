{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { LineChart, BarChart, PieChart, ProgressChart, ContributionGraph, StackedBarChart } from \"react-native-chart-kit\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState([1, 2, 3, 4, 5]),\n      _useState2 = _slicedToArray(_useState, 2),\n      temp_chart = _useState2[0],\n      setTemp_chart = _useState2[1];\n\n  var _useState3 = useState([5, 4, 3, 2, 1]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pressure_chart = _useState4[0],\n      setPressure_chart = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      showPress = _useState6[0],\n      setShowPress = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      showTemp = _useState8[0],\n      setShowTemp = _useState8[1];\n\n  var _useState9 = useState(0),\n      _useState10 = _slicedToArray(_useState9, 2),\n      sec = _useState10[0],\n      setSec = _useState10[1];\n\n  var label = [];\n\n  for (var i = 0; i < 20; i++) {\n    label.push(i);\n  }\n\n  function getDataTemp() {\n    return _regeneratorRuntime.async(function getDataTemp$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  setInterval(function () {\n    setSec(sec += 1);\n  }, 1000);\n  useEffect(function () {\n    return getDataTemp();\n  }, [sec]);\n\n  function getDataPress() {\n    return _regeneratorRuntime.async(function getDataPress$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  setInterval(function () {\n    setSec(sec += 1);\n  }, 1000);\n  useEffect(function () {\n    return getDataPress();\n  }, [sec]);\n\n  var _useState11 = useState(temp_chart),\n      _useState12 = _slicedToArray(_useState11, 2),\n      swap = _useState12[0],\n      setSwap = _useState12[1];\n\n  function Togglepress() {\n    setSwap(pressure_chart);\n    setShowPress(function (prev) {\n      return !prev;\n    });\n    setShowTemp(function (prev) {\n      return !prev;\n    });\n  }\n\n  function ToggleTemp() {\n    setSwap(temp_chart);\n    setShowTemp(function (prev) {\n      return !prev;\n    });\n    setShowPress(function (prev) {\n      return !prev;\n    });\n  }\n\n  return _jsxs(_Fragment, {\n    children: [_jsxs(View, {\n      style: styles.container,\n      children: [_jsx(Text, {\n        children: \" Readings visulaization\"\n      }), _jsx(LineChart, {\n        data: {\n          labels: label.map(function (index) {\n            return index;\n          }),\n          datasets: [{\n            label: label.length + \" Temperature Readings\",\n            data: swap.map(function (item) {\n              return item;\n            })\n          }]\n        },\n        width: 1220,\n        height: 220,\n        yAxisInterval: 2,\n        chartConfig: {\n          backgroundGradientFrom: \"blue\",\n          backgroundGradientTo: \"#ffa726\",\n          decimalPlaces: 2,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n            return \"rgba(255, 255, 255, \" + opacity + \")\";\n          },\n          labelColor: function labelColor() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;\n            return \"rgba(255, 255, 255, \" + opacity + \")\";\n          },\n          style: {\n            borderRadius: 16\n          },\n          propsForDots: {\n            r: \"6\",\n            strokeWidth: \"2\",\n            stroke: \"#ffa726\"\n          }\n        }\n      })]\n    }), showPress && _jsx(Button, {\n      style: styles.button,\n      title: \"Go to Pressure\"\n    }), _jsx(Button, {\n      style: styles.button,\n      title: \"Alarm\"\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 5,\n    backgroundColor: 'rgba(127, 255, 212, 0.062)',\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginStart: 10\n  },\n  button: {\n    flex: 2,\n    marginStart: 30\n  }\n});","map":{"version":3,"sources":["D:/IOT tasks/Wireless-Communication/react-native-app/App.js"],"names":["StatusBar","useEffect","useState","LineChart","BarChart","PieChart","ProgressChart","ContributionGraph","StackedBarChart","App","temp_chart","setTemp_chart","pressure_chart","setPressure_chart","showPress","setShowPress","showTemp","setShowTemp","sec","setSec","label","i","push","getDataTemp","setInterval","getDataPress","swap","setSwap","Togglepress","prev","ToggleTemp","styles","container","labels","map","index","datasets","length","data","item","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","color","opacity","labelColor","style","borderRadius","propsForDots","r","strokeWidth","stroke","button","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","marginStart"],"mappings":"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","sourcesContent":["import { StatusBar } from 'expo-status-bar';\r\nimport { useEffect, useState } from 'react';\r\nimport { StyleSheet, Text, View,Button } from 'react-native';\r\nimport {\r\n  LineChart,\r\n   BarChart,\r\n   PieChart,\r\n   ProgressChart,\r\n   ContributionGraph,\r\n   StackedBarChart\r\n } from \"react-native-chart-kit\";\r\nexport default function App() {\r\n  let [temp_chart,setTemp_chart]=useState([1,2,3,4,5]);\r\n  let [pressure_chart,setPressure_chart]=useState([5,4,3,2,1]);\r\n  let [showPress, setShowPress] = useState(true)\r\n  let [showTemp, setShowTemp] = useState(false)\r\n  let[sec,setSec]= useState(0)\r\n\r\n\r\nvar label=[]\r\n  for (let i=0;i<20;i++)\r\n  {\r\n    label.push(i)\r\n  }\r\n\r\n  //Temperature Readings\r\n  async function getDataTemp()\r\n  {\r\n    // let response = await fetch(\"http://localhost:5000/temp\")\r\n    // //let json = await response.json()\r\n    // setTemp_chart(response)\r\n    // console.log(response)\r\n\r\n  }\r\n  setInterval(() => {\r\n    setSec(sec+=1)\r\n  }, 1000);\r\n  useEffect(()=>getDataTemp(),[sec])\r\n\r\n\r\n//Pressure Readings\r\n  async function getDataPress()\r\n  {\r\n    // let response = await fetch(\"http://localhost:5000/pres\")\r\n    // //let json = await response.json()\r\n    // setPressure_chart(response)\r\n    // console.log(response)\r\n\r\n  }\r\n  setInterval(() => {\r\n    setSec(sec+=1)\r\n  }, 1000);\r\n  useEffect(()=>getDataPress(),[sec])\r\n\r\n  let [swap,setSwap]=useState(temp_chart) //swap between temperature and pressure data visualization.\r\n  function Togglepress() //to show pressure data chart\r\n  {\r\n    setSwap(pressure_chart)\r\n    setShowPress((prev)=>!prev)\r\n    setShowTemp((prev)=>!prev)\r\n  }\r\n  function ToggleTemp()//to show temperature data chart\r\n  {\r\n    setSwap(temp_chart)\r\n    setShowTemp((prev)=>!prev)\r\n    setShowPress((prev)=>!prev)\r\n  }\r\n  return (\r\n    <>\r\n<View style={styles.container}>\r\n  {/* <Text>Bezier Line Chart</Text> */}\r\n  <Text> Readings visulaization</Text>\r\n  <LineChart\r\n    data={{\r\n//this is x-axis data\r\n      labels: label.map((index) => index),\r\n      datasets: [\r\n        {label: `${label.length} Temperature Readings`,\r\n          //this is y-axis       \r\n/*you need to add your data here from JSON, and remember the data you are requesting should be integer because it is line chart*/\r\n          \r\n          data:  swap.map((item)=>item) \r\n        }\r\n      ]\r\n    }}\r\n    width={1220} // from react-native\r\n    height={220}\r\n    yAxisInterval={2} // optional, defaults to 1\r\n    chartConfig={{\r\n      // backgroundColor: \"blue\",\r\n      backgroundGradientFrom: \"blue\",\r\n      backgroundGradientTo: \"#ffa726\",\r\n      decimalPlaces: 2, // optional, defaults to 2dp\r\n      color: (opacity = 0.5) => `rgba(255, 255, 255, ${opacity})`,\r\n      labelColor: (opacity = 0.5) => `rgba(255, 255, 255, ${opacity})`,\r\n      style: {\r\n        borderRadius: 16\r\n      },\r\n      propsForDots: {\r\n        r: \"6\",\r\n        strokeWidth: \"2\",\r\n        stroke: \"#ffa726\"\r\n      }\r\n    }}\r\n  />\r\n</View>\r\n{showPress&&<Button style={styles.button} title='Go to Pressure' />}\r\n  <Button style={styles.button} title='Alarm'/>\r\n</>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 5,\r\n    backgroundColor: 'rgba(127, 255, 212, 0.062)',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    marginStart:10\r\n  },\r\n  button:{\r\n    flex:2,\r\n    // flexDirection:'row',\r\n    marginStart:30\r\n  }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}