{"ast":null,"code":"var _jsxFileName = \"D:\\\\IOT tasks\\\\Wireless-Communication\\\\react-app\\\\src\\\\Component\\\\Display\\\\Display.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport style from './Display.module.css';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nimport \"chartjs-plugin-streaming\";\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend); // Display component\n\nexport default function Display() {\n  _s();\n\n  let [temp_chart, setTemp_chart] = useState([]);\n  let [pressure_chart, setPressure_chart] = useState([]);\n  let [sec, setSec] = useState(0);\n  let [showPress, setShowPress] = useState(true);\n  let [showTemp, setShowTemp] = useState(false);\n  let [ledstate, setLedstate] = useState('OFF');\n  var label = [];\n\n  for (let i = 0; i < 20; i++) {\n    label.push(i);\n  }\n\n  setInterval(() => {\n    setSec(sec += 1);\n  }, 1000); // function refreshPage() {\n  //   window.location.reload(false);\n  // }\n  // Get Tempreture sensor readings\n\n  async function get_Temp_Data() {\n    let {\n      data\n    } = await axios('http://localhost:5000/temp');\n    console.log(data);\n    setTemp_chart(data);\n  }\n\n  useEffect(() => {\n    get_Temp_Data();\n  }, [sec]); // Get Pressure sensor Readings\n\n  async function get_Pressure_Data() {\n    let {\n      data\n    } = await axios('http://localhost:5000/pres');\n    console.log(data);\n    setPressure_chart(data);\n  }\n\n  useEffect(() => {\n    get_Pressure_Data();\n  }, [sec]); // Send LED_STATE\n\n  /*async function get_LED_STATE(){\r\n    let {data} = await axios.post('http://localhost:5000//TrunLed',ledstate);\r\n    console.log(data)        \r\n    }\r\n    useEffect(()=>\r\n    {\r\n      get_LED_STATE()\r\n      })*/\n\n  var Temp_data = {\n    labels: label.map(index => index),\n    datasets: [{\n      label: `${label.length} Temperature Readings`,\n      data: temp_chart.map(temp => temp),\n      backgroundColor: [// 'rgba(255, 99, 132, 0.2)',\n        // 'rgba(54, 162, 235, 0.2)',\n        // 'rgba(255, 206, 86, 0.2)',\n        // 'rgba(75, 192, 192, 0.2)',\n        // 'rgba(153, 102, 255, 0.2)',\n        // 'rgba(255, 159, 64, 0.2)'\n      ],\n      borderColor: [//   'rgba(255, 99, 132, 1)',\n      //   'rgba(54, 162, 235, 1)',\n      //   'rgba(255, 206, 86, 1)',\n      'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n      borderWidth: 1\n    }]\n  };\n  var Pressure_data = {\n    labels: label.map(index => index),\n    datasets: [{\n      label: `${label.length} Pressure Readings`,\n      data: pressure_chart.map(temp => temp),\n      backgroundColor: [// 'rgba(255, 99, 132, 0.2)',\n        // 'rgba(54, 162, 235, 0.2)',\n        // 'rgba(255, 206, 86, 0.2)',\n        // 'rgba(75, 192, 192, 0.2)',\n        // 'rgba(153, 102, 255, 0.2)',\n        // 'rgba(255, 159, 64, 0.2)'\n      ],\n      borderColor: [// 'rgba(255, 99, 132, 1)',\n      // 'rgba(54, 162, 235, 1)',\n      // 'rgba(255, 206, 86, 1)',\n      'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n      borderWidth: 1\n    }]\n  };\n  var options = {\n    maintainAspectRatio: false,\n    legend: {\n      labels: {\n        fontSize: 25\n      }\n    }\n  };\n  let [swap, setSwap] = useState(Temp_data); //swap between temperature and pressure data visualization.\n\n  function Togglepress() //to show pressure data chart\n  {\n    setSwap(Pressure_data);\n    setShowPress(prev => !prev);\n    setShowTemp(prev => !prev);\n  }\n\n  function ToggleTemp() //to show temperature data chart\n  {\n    setSwap(Temp_data);\n    setShowTemp(prev => !prev);\n    setShowPress(prev => !prev);\n  }\n\n  async function SET_LED_STATE() {\n    setLedstate('ON');\n    let response = await axios.post('http://localhost:5000//TrunLed', ledstate); // console.log(data)\n\n    console.log(response);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-4 mt-3\",\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: swap,\n        height: 400,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center pt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-5\",\n            children: [showPress && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => Togglepress(),\n              children: \"  Go to pressure  \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 20\n            }, this), showTemp && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => ToggleTemp(),\n              children: \"  Go to temperature  \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"col-md-5 offset-2\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary\",\n              onClick: () => SET_LED_STATE(),\n              children: \" Alarm \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 5\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 3\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"Time_Header border border-2 py-2 mt-2\",\n        children: [\" \", /*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"fa-solid fa-clock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 59\n        }, this), \" \", new Date().toLocaleTimeString(), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: sec\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Display, \"4DuvyRrfSDuScAOW0arDjcesUvs=\");\n\n_c = Display;\n\nvar _c;\n\n$RefreshReg$(_c, \"Display\");","map":{"version":3,"sources":["D:/IOT tasks/Wireless-Communication/react-app/src/Component/Display/Display.jsx"],"names":["React","useState","useEffect","style","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Line","axios","register","Display","temp_chart","setTemp_chart","pressure_chart","setPressure_chart","sec","setSec","showPress","setShowPress","showTemp","setShowTemp","ledstate","setLedstate","label","i","push","setInterval","get_Temp_Data","data","console","log","get_Pressure_Data","Temp_data","labels","map","index","datasets","length","temp","backgroundColor","borderColor","borderWidth","Pressure_data","options","maintainAspectRatio","legend","fontSize","swap","setSwap","Togglepress","prev","ToggleTemp","SET_LED_STATE","response","post","Date","toLocaleTimeString"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport style from './Display.module.css'\r\n\r\n\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from 'chart.js';\r\nimport \"chartjs-plugin-streaming\"\r\nimport { Line } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\n\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\n\r\n// Display component\r\nexport default function Display() {\r\n\r\n    let [temp_chart,setTemp_chart]=useState([]);\r\n    let [pressure_chart,setPressure_chart]=useState([]);\r\n    let [sec,setSec]=useState(0)\r\n    let [showPress, setShowPress] = useState(true)\r\n    let [showTemp, setShowTemp] = useState(false)\r\n    let [ledstate,setLedstate]=useState('OFF');\r\n    var label=[]\r\n\r\n    for (let i=0;i<20;i++)\r\n    {\r\n      label.push(i)\r\n    }\r\n    \r\n      setInterval(() => {\r\n        setSec(sec+=1)\r\n      }, 1000);\r\n\r\n    // function refreshPage() {\r\n    //   window.location.reload(false);\r\n    // }\r\n   \r\n    // Get Tempreture sensor readings\r\n    async function get_Temp_Data(){\r\n      let {data} = await axios('http://localhost:5000/temp');\r\n      console.log(data)\r\n      setTemp_chart(data);        \r\n    }\r\n \r\n    useEffect(()=>\r\n    {\r\n      get_Temp_Data()\r\n    },[sec])\r\n    \r\n\r\n    // Get Pressure sensor Readings\r\n    async function get_Pressure_Data(){\r\n      let {data} = await axios('http://localhost:5000/pres');\r\n      console.log(data)\r\n      setPressure_chart(data);        \r\n    }\r\n \r\n    useEffect(()=>\r\n    {\r\n      get_Pressure_Data()\r\n    },[sec])\r\n\r\n    // Send LED_STATE\r\n    /*async function get_LED_STATE(){\r\n      let {data} = await axios.post('http://localhost:5000//TrunLed',ledstate);\r\n      console.log(data)        \r\n      }\r\n      useEffect(()=>\r\n      {\r\n        get_LED_STATE()\r\n\r\n      })*/\r\n\r\n    var Temp_data = {\r\n      labels: label.map((index) => index),\r\n      datasets: [{\r\n        label: `${label.length} Temperature Readings`,\r\n        data: temp_chart.map((temp)=> temp),\r\n        backgroundColor: [\r\n          // 'rgba(255, 99, 132, 0.2)',\r\n          // 'rgba(54, 162, 235, 0.2)',\r\n          // 'rgba(255, 206, 86, 0.2)',\r\n          // 'rgba(75, 192, 192, 0.2)',\r\n          // 'rgba(153, 102, 255, 0.2)',\r\n          // 'rgba(255, 159, 64, 0.2)'\r\n        ],\r\n        borderColor: [\r\n        //   'rgba(255, 99, 132, 1)',\r\n        //   'rgba(54, 162, 235, 1)',\r\n        //   'rgba(255, 206, 86, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(153, 102, 255, 1)',\r\n          'rgba(255, 159, 64, 1)'\r\n        ],\r\n        borderWidth: 1\r\n      }]\r\n    };\r\n  \r\n    var Pressure_data = {\r\n      labels: label.map((index) => index),\r\n      datasets: [{\r\n        label: `${label.length} Pressure Readings`,\r\n        data: pressure_chart.map((temp)=> temp),\r\n        backgroundColor: [\r\n          // 'rgba(255, 99, 132, 0.2)',\r\n          // 'rgba(54, 162, 235, 0.2)',\r\n          // 'rgba(255, 206, 86, 0.2)',\r\n          // 'rgba(75, 192, 192, 0.2)',\r\n          // 'rgba(153, 102, 255, 0.2)',\r\n          // 'rgba(255, 159, 64, 0.2)'\r\n        ],\r\n        borderColor: [\r\n          // 'rgba(255, 99, 132, 1)',\r\n          // 'rgba(54, 162, 235, 1)',\r\n          // 'rgba(255, 206, 86, 1)',\r\n          'rgba(75, 192, 192, 1)',\r\n          'rgba(153, 102, 255, 1)',\r\n          'rgba(255, 159, 64, 1)'\r\n        ],\r\n        borderWidth: 1\r\n      }]\r\n    };\r\n\r\n    var options = {\r\n      maintainAspectRatio: false,\r\n      legend: {\r\n        labels: {\r\n          fontSize: 25,\r\n        },\r\n      },\r\n    }\r\n\r\n  let [swap,setSwap]=useState(Temp_data) //swap between temperature and pressure data visualization.\r\n  function Togglepress() //to show pressure data chart\r\n  {\r\n    setSwap(Pressure_data)\r\n    setShowPress((prev)=>!prev)\r\n    setShowTemp((prev)=>!prev)\r\n  }\r\n  function ToggleTemp()//to show temperature data chart\r\n  {\r\n    setSwap(Temp_data)\r\n    setShowTemp((prev)=>!prev)\r\n    setShowPress((prev)=>!prev)\r\n  }\r\n\r\n  async function SET_LED_STATE()\r\n  {\r\n    setLedstate('ON');\r\n    let response = await axios.post('http://localhost:5000//TrunLed',ledstate);\r\n   // console.log(data)\r\n    console.log(response)        \r\n  }\r\n\r\n  return (\r\n    <div className='container-fluid'>\r\n    <div className='pt-4 mt-3'>\r\n    <Line \r\n      data={swap}\r\n      height={400}\r\n      options={options}\r\n    />\r\n    </div>\r\n\r\n  <div className='text-center pt-4' >\r\n  <div className=\"container\">\r\n    <div className=\"row\">\r\n      <div className=\"col-md-5\">\r\n\r\n       {showPress&&<button className='btn btn-success' onClick={()=>Togglepress()} >  Go to pressure  </button>}\r\n       {showTemp&&<button className='btn btn-success' onClick={()=>ToggleTemp()} >  Go to temperature  </button>}\r\n      \r\n      </div>\r\n  <div className=\"col-md-5 offset-2\">\r\n    <button className='btn btn-primary' onClick={()=>SET_LED_STATE()} > Alarm </button>\r\n  </div></div>\r\n  </div>\r\n  <h2 className='Time_Header border border-2 py-2 mt-2' > <i className=\"fa-solid fa-clock\"></i> {new Date().toLocaleTimeString()}.</h2>\r\n  {/* <button className='btn btn-primary mt-5'  onClick={()=>refreshPage()}>Update Data</button> */}\r\n  </div>\r\n  <p>{sec}</p>\r\n  </div>\r\n  )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}